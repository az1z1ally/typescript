TYPESCRIPT:
  Typescript is not a new language, it is a most popular static type extension for JS, which means we are getting
  the missing part in JS which is "type".

  - It is a superset of JS, which you can  apply all the knowledge you have about about JS in TS(write pure JS code in TS),
  but you need to learn additionally all stuffs about TS(data types).

  - Typescript cannot be run directly in the browser, it needs to be Transpiled in to JS which can then be run into the browser.
  - We can run both(TS &JS ) of them simultaneosly in a single project, which means you can take a JS project that you need to transform to TS
  and change it file by file not at once.

  - Typescript does'nt have basic knowledge, it is an enhacement of JS, which means you need to learn it if you know JS.

  JS being a dyanamic typed language, means you can write anything and it will only break at runtime, but with typescript
  you can see the errors as you write code(in your editor or inside console), there fore discover errors earlier.
  
  WHY TYPESCRIPT?
  - See errors in transpiling face and not in the runtime(This does'nt mean we will never get runtime errors, but we will have less of them).

  "Transpiler" is a software that takes source code written in a high-level language and convert it into another high-level language.

Hitesh freecodecamp
https://www.youtube.com/watch?v=30LWjhZzg50


// Play Ground
https://www.typescriptlang.org/
https://www.typescriptlang.org/play


// Arrow function
https://www.w3schools.com/js/js_arrow_function.asp
In regular functions the this keyword represented the object that called the function, which could be the window, the document, a button or whatever.

With arrow functions the this keyword always represents the object that defined the arrow function.

Let us take a look at two examples to understand the difference.

Both examples call a method twice, first when the page loads, and once again when the user clicks a button.

The first example uses a regular function, and the second example uses an arrow function.

The result shows that the first example returns two different objects (window and button), and the second example returns the window object twice, because the window object is the "owner" of the function.


// Regular Function:
hello = function() {
  document.getElementById("demo").innerHTML += this;
}

// The window object calls the function:
window.addEventListener("load", hello);

// A button object calls the function:
document.getElementById("btn").addEventListener("click", hello); 

<body>

<h1>JavaScript "this"</h1>

<p>This example demonstrate that in Arrow Functions, the "this" keyword represents the object that owns the function, no matter who calls the function.</p>

<p>Click the button to execute the "hello" function again, and you will see that "this" still  represents the window object.</p>

<button id="btn">Click Me!</button>

<p id="demo"></p>

<script>
let hello = "";

// Arrow Function
  hello = () => {
    document.getElementById("demo").innerHTML += this;
  }

  //The window object calls the function:
  window.addEventListener("load", hello);

  //A button object calls the function:
  document.getElementById("btn").addEventListener("click", hello);
</script>

</body>


NB: Remember these differences when you are working with functions. Sometimes the behavior of regular functions is what you want, if not, use arrow functions.